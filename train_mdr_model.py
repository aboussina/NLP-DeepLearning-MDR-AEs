#######################################################################
#  Title:   train_mdr_model.py
#
#  Purpose: Train a Deep Learning model for binary classification of
#           adverse events based on event description.
#
#  Author:  Aaron Boussina, Hedral Inc.
#
#  Inputs:  The Feather dataset (aeData.file) generated by
#           get_mdr_source_data.py containing the MDR text, device name,
#           and events labeled as adverse (Y/N)
#
#  Output:  The trained model structure as a JSON file
#           (MdrModelStructure.json) with the following layers:
#             1.  Input
#             2.  Embedding
#             3.  3 Densely-connected NN hidden layers
#             4.  Output layer
#
#           The model weights as an hdf5 dataset (MdrModelWeights.h5)
#           and the tokenizer used for text processing as a JSON file
#           (mdrToken.json)
#
#           The test examples (mdrModelTestSet.npy) used to evaluate
#           model performance.
#
#  Revision History:
#  AB 18NOV2020:  N/A, Initial Release.
#######################################################################


#######################################################################
# Import Packages and Source Data
#######################################################################

import pandas as pd
from preprocess_mdr_text import *
from tensorflow.keras.preprocessing.text import Tokenizer
from sklearn.model_selection import train_test_split
import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Dense, Flatten

# Set Input Location
ae_data_loc = "SourceData/aeData.file"

# Import Data Generated by getMdrSourceData.py
ae_data = pd.read_feather(ae_data_loc)


#######################################################################
# Text Preprocessing
#######################################################################

# Add device generic name to the MDR text to enable the model to train
# on this information
ae_data['text'] = ae_data['device_type'] + ' ' + ae_data['text']

# Call text processing function to perform text cleanup
preprocess_mdr_text(ae_data)


#######################################################################
# Prepare Embedding Layer
#######################################################################

# Change aeYN for binary classification
ae_data['y'] = 1*(ae_data['aeYN'] == 'Y')

# Break into Training (80%) and Test (20%) sets
X_train, X_test, y_train, y_test = train_test_split(
    ae_data['X'],
    np.array(ae_data['y'], dtype=np.float),
    test_size=0.20,
    random_state=5
)

# Tokenize processed Text
mdr_token = Tokenizer(num_words=40000)
mdr_token.fit_on_texts(X_train)

X_train = mdr_token.texts_to_sequences(X_train)
X_test = mdr_token.texts_to_sequences(X_test)

# Pad the sequences
X_train = pad_sequences(X_train, padding='post', maxlen=500)
X_test = pad_sequences(X_test, maxlen=len(X_train[0]), padding='post')


#######################################################################
# Create NN Model
#######################################################################

model = Sequential([
    Embedding(
        len(mdr_token.word_index) + 1,
        300,
        name="embeddingLayer",
        input_length=len(X_train[0])
    ),
    Flatten(),
    Dense(300, activation="relu"),
    Dense(300, activation="relu"),
    Dense(300, activation="relu"),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy',
              metrics=['accuracy'])


#######################################################################
# Train NN Model
#######################################################################

model_log = model.fit(
    X_train,
    y_train,
    validation_data=(X_test, y_test),
    batch_size=64,
    epochs=3,
    verbose=1
)


#######################################################################
# Output Model Structure and Weights as well as the testing set
#######################################################################

model.save_weights("ModelOutputs/MdrModelWeights.h5")

model_structure_output = open('ModelOutputs/MdrModelStructure.json', 'w')
model_structure_output.write(model.to_json())
model_structure_output.close()

mdr_token_output = open('ModelOutputs/mdrToken.json', 'w')
mdr_token_output.write(mdr_token.to_json())
mdr_token_output.close()

# Output testing set
model_test_set = {
    'X': X_test,
    'y': y_test
}

np.save("ModelOutputs/mdrModelTestSet.npy", model_test_set)
