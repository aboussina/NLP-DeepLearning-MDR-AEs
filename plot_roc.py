#######################################################################
#  Title:   plot_roc.py
#
#  Purpose: Plot the Receiver Operating Characteristics curve for the
#           model trained in train_mdr_model.py to assess model
#           performance
#
#  Author:  Aaron Boussina, Hedral Inc.
#
#  Inputs:  The model parameters trained by train_mdr_model.py
#               1.  MdrModelStructure.json
#               2.  MdrModelWeights.h5
#               3.  mdrToken.json
#
#           The hdf5 dataset (aeData.h5) generated by
#           get_mdr_source_data.py containing the MDR text, device name,
#           and events labeled as adverse (Y/N)
#
#  Output:  A plot of the Receiver Operating Characteristics Curve
#
#  Revision History:
#  AB 17NOV2020:  N/A, Initial Release.
#######################################################################

#######################################################################
# Import Packages, Source Data, and Model Parameters
#######################################################################

import pandas as pd
from preprocess_mdr_text import *
from keras.models import model_from_json
from keras_preprocessing.text import tokenizer_from_json
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

# Load model, model weights, and model tokenizer
src_model = "ModelOutputs/MdrModelStructure.json"
src_model_weights = "ModelOutputs/MdrModelWeights.h5"
src_tokenizer = "ModelOutputs/mdrToken.json"

model_file = open(src_model)
model = model_from_json(model_file.read())
model.load_weights(src_model_weights)
model_file.close()

tokenFile = open(src_tokenizer)
mdr_token = tokenizer_from_json(tokenFile.read())
tokenFile.close()

# Set Input Location
ae_data_loc = "SourceData/aeData.h5"

# Import Data Generated by getMdrSourceData.py
# This will form the cross validation set for the ROC Curve
ae_data_xval = pd.read_hdf(ae_data_loc).tail(5000)


#######################################################################
# Text Preprocessing and Tokenization
#######################################################################

# Change aeYN for binary classification
ae_data_xval['y'] = 1*(ae_data_xval['aeYN'] == 'Y')

ae_data_xval['text'] = ae_data_xval['device_type'] + ' ' + ae_data_xval['text']
preprocess_mdr_text(ae_data_xval)

X_xval = mdr_token.texts_to_sequences(ae_data_xval['X'])

padding_length = model.input.shape.as_list()[1]
X_xval = pad_sequences(X_xval, maxlen=padding_length, padding='post')


#######################################################################
# Plot ROC Curve
#######################################################################

y_xval_prediction = model.predict(X_xval)
y_xval = ae_data_xval['y']

false_pos_rate, true_pos_rate, thresh = roc_curve(y_xval, y_xval_prediction)
auc = round(roc_auc_score(y_xval, y_xval_prediction), 3)
auc_label = "ROC Curve (area = " + str(auc) + ")"

plt.figure()
plt.plot(
    false_pos_rate,
    true_pos_rate,
    color="orangered",
    label=auc_label
)
plt.plot([0, 1], [0, 1], color="slateblue")
plt.axis([-0.004, 1, 0, 1.006])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title("ROC Curve for MDR AE Classifier")
plt.legend(loc="lower right")
plt.savefig("Graphics/roc_curve.png")
